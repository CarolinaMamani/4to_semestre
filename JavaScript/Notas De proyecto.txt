Clase 5. Parte 1
El companero nos va a enceniar a hacer una lista de tareas. Al parecer desde el principio paso a paso como el profe Ariel

Abreviaturas: 
    PG (Postgres)
    
Todo la app se desplegla/ conecta en el railway, tendremos 3 servidores
 - BD
 - Backend
 - Fronted

Modulo jwt, sirve para identificar al usuario y las peticiones que se realicen
TailWindCSS para crear las clases de CSS mas rapido
PERN : Postgres Express React Node

Video 3 Inicio del proyecto:
 - Creacion de carpetas instalaciones, configuraciones basicas y commits

 1. Instalamos un package Json. Usando la terminal escribiendo: npm init -y
 2. Instalamos los modulos o dependencias necesariarias para produccion
    npm i express (es el framework de Backend para crear el servidor web)
        cookie-parser (lee los cookies a travez de js)
        cors (comunica el front y el back, permite una configuracion donde le front pueda pedir datos a la backend)
        morgan (biblioteca permite ver las peticiones del front)
        pg (driver de pg que permite la coneccion con Postgres y enviar las consultas sql al backend)
        zod (biblioteca que permite realizar validaciones con backend)
        md5 (biblioteca modulo, mediante el servicio grabatar (pide email e incrptacion con el md5) permite que genere una imagen al registro del usuario)
        jasonwebtoken (permite generar un token a travez del backend, validaciones de comunicacion entre backend y fronted)
        express-promise-router (forma para tener distintas rutas/paginas en el back para poder manejar los errores de manera mas facil)

3. Instalamos dependencias de Desarrollo
    npm i nodemon (scritp que permite reiniciar el codigo cada vez que realicemos un cambio)
         eslint (ayuda a analizar el codigo y lanza advertencias para ayudarnos con la estructura del codigo)
         -D (es para que no las instale como dependencias sino como DevDependencias)



Archivos creados:
router: permite tener las rutas de nuestras api.
middlewares: generamos funciones, archivos que tienen funciones que vamos a leer antes de llegar a las rutas
libs : codigo que se puede reutilizar en otras partes de la app
schemas: para validar datos que nos llegan al backend
controllers: a escribir la logica cuando llegamos a una ruta. /login la logica en esa ruta estara aqui

db.js: para generar las consultas  y coneccion sql a la base de datos
config.js: tendra las configuraciones de la app, usuario contrasena de la base de datos, direccion, puerto del servidos, token, llaves
app.js: relacionado con el servidor, codigo del servidor. Es el archivo init a la app